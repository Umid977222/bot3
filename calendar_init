import logging

from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from aiogram.utils.callback_data import CallbackData

from aiogram_calendar import simple_cal_callback, SimpleCalendar, dialog_cal_callback, DialogCalendar, SimpleTime

from config import token

# API_TOKEN = '' uncomment and insert your telegram bot API key here

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=token)
dp = Dispatcher(bot)
cb = CallbackData('post', 'action')

# ('Navigation Calendar', 'Dialog Calendar')
start_kb = types.InlineKeyboardMarkup(row_width=2)
start_kb.add(
             types.InlineKeyboardButton(text='Navigation Calendar', callback_data=cb.new('Navigation Calendar')),
             types.InlineKeyboardButton(text='Dialog Calendar', callback_data=cb.new('Dialog Calendar'))
             )

start_kb1 = types.InlineKeyboardMarkup(row_width=2)
start_kb1.add(
             types.InlineKeyboardButton(text='Now', callback_data=cb.new('Now')),
             types.InlineKeyboardButton(text='Time', callback_data=cb.new('Time'))
             )


# starting bot when user sends `/start` command, answering with inline calendar
@dp.message_handler(commands=['start'])
async def cmd_start(message: Message):
    await message.reply('Pick a calendar', reply_markup=start_kb)


@dp.callback_query_handler(cb.filter(action=['Navigation Calendar']))
async def cb_data(query: types.CallbackQuery, callback_data: dict):
    action = callback_data.get('action')
    if action == 'Navigation Calendar':
        await query.message.edit_text("Please select a date: ", reply_markup=await SimpleCalendar().start_calendar())


# simple calendar usage
@dp.callback_query_handler(simple_cal_callback.filter())
async def process_simple_calendar(callback_query: CallbackQuery, callback_data: dict):
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if selected:
        await callback_query.message.answer(
            f'You selected {date.strftime("%d/%m/%Y")}',
            reply_markup=start_kb1
        )


@dp.callback_query_handler(cb.filter(action=['Now']))
async def cb_data3(query: types.CallbackQuery, callback_data: dict):
    action = callback_data.get('action')
    if action == 'Now':
        await query.message.edit_text("Please select a time: ", reply_markup=await SimpleTime().start_time())


@dp.callback_query_handler(simpletime_cal_callback.filter())
async def process_simple_calendar(callback_query: CallbackQuery, callback_data: dict):
    selected, time = await SimpleTime().process_selection(callback_query, callback_data)
    if selected:
        await callback_query.message.answer(
            f'You selected {time.strftime("%t:%m")}'
        )


@dp.callback_query_handler(cb.filter(action=['Dialog Calendar']))
async def cb_data2(query: types.CallbackQuery, callback_data: dict):
    action = callback_data.get('action')
    if action == 'Dialog Calendar':
        await query.message.edit_text("Please select a date: ", reply_markup=await DialogCalendar().start_calendar())


# dialog calendar usage
@dp.callback_query_handler(dialog_cal_callback.filter())
async def process_dialog_calendar(callback_query: CallbackQuery, callback_data: dict):
    selected, date = await DialogCalendar().process_selection(callback_query, callback_data)
    if selected:
        await callback_query.message.answer(
            f'You selected {date.strftime("%d/%m/%Y")}'
        )

